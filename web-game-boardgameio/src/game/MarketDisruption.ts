import { Game, Ctx } from 'boardgame.io';
import { GameState, initialGameState, Player, Product, Design, ManufacturingOrder } from './GameState';

const rollDice = (sides: number = 6): number => Math.floor(Math.random() * sides) + 1;
const rollMultipleDice = (count: number, sides: number = 6): number[] => 
  Array.from({ length: count }, () => rollDice(sides));

const getDemandValue = (cost: number): number[] => {
  const demandMap: { [key: number]: number[] } = {
    1: [6, 7, 8],
    2: [5, 9], 
    3: [4, 10],
    4: [3, 11],
    5: [2, 12]
  };
  return demandMap[cost] || [];
};

const checkVictoryConditions = (player: Player): boolean => {
  return (player.prestige >= 17 && player.money >= 75) || player.money >= 150;
};

const MarketDisruption: Game<GameState> = {
  name: 'MarketDisruption',
  
  setup: () => {
    const G = { ...initialGameState };
    // „É≠„Éì„ÉºÁä∂ÊÖã„ÅßÈñãÂßãÔºà„Éó„É¨„Ç§„É§„Éº„ÅØÂàùÊúüÂåñ„Åó„Å™„ÅÑÔºâ
    return G;
  },

  moves: {
    manufacture: ({ G, ctx }, designId: string) => manufacture(G, ctx, designId),
    sell: ({ G, ctx }, productId: string, price: number) => sell(G, ctx, productId, price),
    purchase: ({ G, ctx }, targetPlayerId: string, productId: string) => purchase(G, ctx, targetPlayerId, productId),
    review: ({ G, ctx }, targetPlayerId: string, productId: string, isPositive: boolean) => review(G, ctx, targetPlayerId, productId, isPositive),
    research: ({ G, ctx }) => research(G, ctx),
    partTimeWork: ({ G, ctx }) => partTimeWork(G, ctx),
    buyBack: ({ G, ctx }, productId: string) => buyBack(G, ctx, productId),
    discontinue: ({ G, ctx }, designId: string) => discontinue(G, ctx, designId),
    resale: ({ G, ctx }, targetPlayerId: string, productId: string, resalePrice: number) => resale(G, ctx, targetPlayerId, productId, resalePrice),
    design: ({ G, ctx }, isOpenSource: boolean = false) => design(G, ctx, isOpenSource),
    promoteRegulation: ({ G, ctx }) => promoteRegulation(G, ctx),
    dayLabor: ({ G, ctx }) => dayLabor(G, ctx),
    activateTrend: ({ G, ctx }) => activateTrend(G, ctx),
    purchasePrestige: ({ G, ctx }) => purchasePrestige(G, ctx),
    outsourceReview: ({ G, ctx }, targetPlayerId: string, productId: string, isPositive: boolean) => outsourceReview(G, ctx, targetPlayerId, productId, isPositive),
    outsourceManufacturing: ({ G, ctx }, designId: string, quantity: number, targetType: 'automata' | 'player', targetPlayerId?: string) => outsourceManufacturing(G, ctx, designId, quantity, targetType, targetPlayerId),
    respondToManufacturingOrder: ({ G, ctx }, orderId: string, accept: boolean) => respondToManufacturingOrder(G, ctx, orderId, accept),
    
    // „Ç≤„Éº„É†ÈñãÂßã„É†„Éº„Éñ
    startGame: ({ G, ctx }) => startGame(G, ctx),

    
    // „Ç≤„Éº„É†ÂèÇÂä†„É†„Éº„Éñ
    joinGame: ({ G, ctx }, playerName: string) => joinGame(G, ctx, playerName),
    
    // Êñ∞„Åó„ÅÑÁµ±Âêà„Ç¢„ÇØ„Ç∑„Éß„É≥: „Ç™„Éº„Éà„Éû„Éï„Çß„Éº„Ç∫ + „Éû„Éº„Ç±„ÉÉ„Éà„Éï„Çß„Éº„Ç∫ + Ê¨°„É©„Ç¶„É≥„Éâ
    executeAutomataAndMarket: ({ G }) => {
      
      // „Ç™„Éº„Éà„Éû„Éï„Çß„Éº„Ç∫ÂÆüË°å
      executeManufacturerAutomata(G);
      
      console.log('üîÑ Executing Resale Automata...');
      executeResaleAutomata(G);
      
      // „Éû„Éº„Ç±„ÉÉ„Éà„Éï„Çß„Éº„Ç∫ÂÆüË°å
      console.log('üè™ Executing Market Phase...');
      executeMarketPhase(G);
      
      // Ê¨°„É©„Ç¶„É≥„Éâ„ÅÆÊ∫ñÂÇô
      G.round++;
      
      // Ë¶èÂà∂ÊÆµÈöé„É©„Ç¶„É≥„ÉâÊï∞„ÇíÂ¢óÂä†
      if (G.regulationStage !== 'none') {
        G.regulationStageRounds++;
      }
      
            
      // ÂÖ®„Éó„É¨„Ç§„É§„Éº„ÅÆAP„Çí„É™„Çª„ÉÉ„Éà
      for (const playerId in G.players) {
        G.players[playerId].actionPoints = 3;
      }
      
      // ÂãùÂà©Êù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ
      for (const playerId in G.players) {
        if (checkVictoryConditions(G.players[playerId])) {
          G.gameEnded = true;
          G.winner = playerId;
                    break;
        }
      }
      
    }
  },

  endIf: ({ G }) => {
    if (G.gameEnded) {
      return { winner: G.winner };
    }
  },

  minPlayers: 1,
  maxPlayers: 4,
  
  // „Ç∑„É≥„Éó„É´„Å™action„Éï„Çß„Éº„Ç∫„ÅÆ„Åø - „Ç™„Éº„Éà„Éû„ÅØËá™ÂãïÂá¶ÁêÜ
  phases: {
    action: {
      start: true,
      turn: {
        order: {
          first: () => 0,
          next: ({ ctx }) => {
            // 1‰∫∫„Éó„É¨„Ç§„ÅÆÂ†¥Âêà„ÅØÂ∏∏„Å´Âêå„Åò„Éó„É¨„Ç§„É§„Éº
            if (ctx.numPlayers === 1) {
              return 0;
            }
            // Ë§áÊï∞‰∫∫„Éó„É¨„Ç§„ÅÆÂ†¥Âêà„ÅØÈÄöÂ∏∏„ÅÆÈ†ÜÁï™
            return (ctx.playOrderPos + 1) % ctx.numPlayers;
          },
        },
        onEnd: ({ G, ctx }) => {
          // „Éû„É´„ÉÅ„Éó„É¨„Ç§„ÅßÊúÄÂæå„ÅÆ„Éó„É¨„Ç§„É§„Éº„ÅÆ„Çø„Éº„É≥ÁµÇ‰∫ÜÊôÇ„Å´„Ç™„Éº„Éà„ÉûÔºÜ„Éû„Éº„Ç±„ÉÉ„ÉàÂÆüË°å
          if (ctx.numPlayers > 1 && ctx.playOrderPos === ctx.numPlayers - 1) {
            console.log('ü§ñ Auto-executing Automata and Market phases for multiplayer...');
            
            // „Ç™„Éº„Éà„Éû„Éï„Çß„Éº„Ç∫ÂÆüË°å
            executeManufacturerAutomata(G);
            executeResaleAutomata(G);
            
            // Â∏ÇÂ†¥„Éï„Çß„Éº„Ç∫ÂÆüË°å
            executeMarketPhase(G);
            
            // Ê¨°„É©„Ç¶„É≥„Éâ„ÅÆÊ∫ñÂÇô
      G.round++;
      
      // Ë¶èÂà∂ÊÆµÈöé„É©„Ç¶„É≥„ÉâÊï∞„ÇíÂ¢óÂä†
      if (G.regulationStage !== 'none') {
        G.regulationStageRounds++;
      }
      
                  
            // ÂÖ®„Éó„É¨„Ç§„É§„Éº„ÅÆAP„Çí„É™„Çª„ÉÉ„Éà
            for (const playerId in G.players) {
              G.players[playerId].actionPoints = 3;
            }
            
            // ÂãùÂà©Êù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ
            for (const playerId in G.players) {
              if (checkVictoryConditions(G.players[playerId])) {
                G.gameEnded = true;
                G.winner = playerId;
                                break;
              }
            }
          }
        }
      },
      endIf: () => false // action„Éï„Çß„Éº„Ç∫„ÅØÁµÇ‰∫Ü„Åó„Å™„ÅÑ
    }
  },
  
  turn: {
    order: {
      first: () => 0,
      next: ({ ctx }) => (ctx.playOrderPos + 1) % ctx.numPlayers,
    }
  },
  
  // Âü∫Êú¨ÁöÑ„Å™„Ç§„Éô„É≥„Éà„ÅÆ„Åø
  events: {
    endTurn: true
  }
};

function manufacture(G: GameState, ctx: Ctx, designId: string) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 1) return 'INVALID_MOVE';
  
  // action„Éï„Çß„Éº„Ç∫„Åß„ÅÆ„ÅøË£ΩÈÄ†ÂèØËÉΩ
  if (ctx.phase !== 'action') return 'INVALID_MOVE';
  
  const design = player.designs.find(d => d.id === designId);
  if (!design) return 'INVALID_MOVE';
  
  if (player.money < design.cost) return 'INVALID_MOVE';
  
  player.money -= design.cost;
  player.actionPoints -= 1;
  
  const product: Product = {
    id: `product-${ctx.currentPlayer}-${Date.now()}`,
    cost: design.cost,
    price: 0, // Price not set yet, will be set when selling
    popularity: 1,
    playerId: ctx.currentPlayer,
    isResale: false
  };
  
  player.personalMarket.push(product);
}

function sell(G: GameState, ctx: Ctx, productId: string, price: number) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 1) return 'INVALID_MOVE';
  if (player.prestige < -5) return 'INVALID_MOVE';
  
  // action„Éï„Çß„Éº„Ç∫„Åß„ÅÆ„ÅøË≤©Â£≤ÂèØËÉΩ
  if (ctx.phase !== 'action') return 'INVALID_MOVE';
  
  const productIndex = player.personalMarket.findIndex(p => p.id === productId && p.price === 0);
  if (productIndex === -1) return 'INVALID_MOVE';
  
  const product = player.personalMarket[productIndex];
  const maxPrice = getMaxPrice(product.cost, player.prestige);
  
  if (price > maxPrice) return 'INVALID_MOVE';
  
  product.price = price;
  player.actionPoints -= 1;
}

function getMaxPrice(cost: number, prestige: number): number {
  if (prestige >= 9) return cost * 4;
  if (prestige >= 3) return cost * 3;
  return cost * 2;
}

function purchase(G: GameState, ctx: Ctx, targetPlayerId: string, productId: string) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 1) return 'INVALID_MOVE';
  
  // action„Éï„Çß„Éº„Ç∫„Åß„ÅÆ„ÅøË≥ºÂÖ•ÂèØËÉΩ
  if (ctx.phase !== 'action') return 'INVALID_MOVE';
  
  // „Ç™„Éº„Éà„Éû„Åã„Çâ„ÅÆË≥ºÂÖ•„ÅÆÂ†¥Âêà
  if (targetPlayerId === 'automata') {
    const productIndex = G.automata.market.findIndex(p => p.id === productId);
    if (productIndex === -1) return 'INVALID_MOVE';
    
    const product = G.automata.market[productIndex];
    if (player.money < product.price) return 'INVALID_MOVE';
    
    player.money -= product.price;
    player.actionPoints -= 1;
    
    // „Ç™„Éº„Éà„Éû„ÅÆÂïÜÂìÅ„ÇíÂâäÈô§
    G.automata.market.splice(productIndex, 1);
    return;
  }
  
  // „Éó„É¨„Ç§„É§„Éº„Åã„Çâ„ÅÆË≥ºÂÖ•„ÅÆÂ†¥Âêà
  const targetPlayer = G.players[targetPlayerId];
  if (!targetPlayer) return 'INVALID_MOVE';
  
  const productIndex = targetPlayer.personalMarket.findIndex(p => p.id === productId);
  if (productIndex === -1) return 'INVALID_MOVE';
  
  const product = targetPlayer.personalMarket[productIndex];
  if (player.money < product.price) return 'INVALID_MOVE';
  
  player.money -= product.price;
  targetPlayer.money += product.price;
  player.actionPoints -= 1;
  
  targetPlayer.personalMarket.splice(productIndex, 1);
}

function executeManufacturerAutomata(G: GameState): void {
  const diceSum = rollDice() + rollDice();
    
  let action: string;
  let targetCost: number;
  let priceMultiplier: number;
  
  if (diceSum <= 4) {
    action = 'high-cost';
    // „ÉÄ„Ç§„Çπ„ÇíÂºï„ÅÑ„Å¶„Ç≥„Çπ„Éà3-5„Å´„Å™„Çã„Åæ„Åß„É≠„Éº„É´
    do { targetCost = rollDice(); } while (targetCost < 3);
    priceMultiplier = 3;
  } else if (diceSum <= 7) {
    action = 'mid-cost';
    // „ÉÄ„Ç§„Çπ„ÇíÂºï„ÅÑ„Å¶„Ç≥„Çπ„Éà3„Å´„Åô„Çã
    targetCost = 3;
    priceMultiplier = 2;
  } else if (diceSum <= 10) {
    action = 'low-cost';
    // „ÉÄ„Ç§„Çπ„ÇíÂºï„ÅÑ„Å¶„Ç≥„Çπ„Éà1-3„Å´„Å™„Çã„Åæ„Åß„É≠„Éº„É´
    do { targetCost = rollDice(); } while (targetCost > 3);
    priceMultiplier = 2;
  } else {
    action = 'clearance';
    // Âú®Â∫´‰∏ÄÊéÉË≤©Â£≤ - Êó¢Â≠òÂïÜÂìÅ„ÅÆ‰æ°Ê†º„Çí‰∏ã„Åí„Çã
    for (const product of G.automata.market) {
      product.price = Math.max(1, product.price - 2);
    }
        
    // „É≠„Ç∞Ë®òÈå≤
    if (G.playLog) {
      G.playLog.push({
        id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        round: G.round,
        phase: G.phase,
        actor: 'manufacturer-automata',
        action: 'Âú®Â∫´‰∏ÄÊéÉ',
        details: `${G.automata.market.length}ÂÄã„ÅÆÂïÜÂìÅ‰æ°Ê†º„Çí-2Ë≥áÈáë`,
        timestamp: Date.now()
      });
    }
    return;
  }
  
    
  // Ë£ΩÈÄ†„Ç¢„ÇØ„Ç∑„Éß„É≥
  const product: Product = {
    id: `manufacturer-automata-${Date.now()}`,
    cost: targetCost,
    price: targetCost * priceMultiplier,
    popularity: 1,
    playerId: 'manufacturer-automata',
    isResale: false
  };
  
  G.automata.market.push(product);
    
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: G.phase,
      actor: 'manufacturer-automata',
      action: 'Ë£ΩÈÄ†',
      details: `„Ç≥„Çπ„Éà${targetCost}„ÄÅ‰æ°Ê†º${product.price}„ÅÆÂïÜÂìÅ„ÇíË£ΩÈÄ†`,
      timestamp: Date.now()
    });
  }
  
  // ÂâØË°åÂãïÔºà„É¨„Éì„É•„ÉºÔºâ
  if (action === 'high-cost') {
    // Â∏ÇÂ†¥ÊúÄÈ´ò‰æ°Ê†ºÂïÜÂìÅ„Å´‰ΩéË©ï‰æ°„É¨„Éì„É•„Éº
    const allProducts: Product[] = [];
    for (const playerId in G.players) {
      allProducts.push(...G.players[playerId].personalMarket.filter(p => p.price > 0));
    }
    allProducts.push(...G.automata.market.filter(p => p.price > 0));
    
    if (allProducts.length > 0) {
      const maxPrice = Math.max(...allProducts.map(p => p.price));
      const targetProducts = allProducts.filter(p => p.price === maxPrice);
      
      for (const targetProduct of targetProducts) {
        targetProduct.popularity = Math.max(1, targetProduct.popularity - 1);
              }
      
      // „É≠„Ç∞Ë®òÈå≤
      if (G.playLog) {
        G.playLog.push({
          id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          round: G.round,
          phase: G.phase,
          actor: 'manufacturer-automata',
          action: '‰ΩéË©ï‰æ°„É¨„Éì„É•„Éº',
          details: `ÊúÄÈ´ò‰æ°Ê†ºÂïÜÂìÅ${targetProducts.length}ÂÄã„Å´‰ΩéË©ï‰æ°`,
          timestamp: Date.now()
        });
      }
    }
  } else if (action === 'low-cost') {
    // Ëá™ÂàÜ„ÅÆÊúÄÂÆâÂïÜÂìÅ„Å´È´òË©ï‰æ°„É¨„Éì„É•„Éº
    const ownProducts = G.automata.market.filter(p => p.price > 0);
    if (ownProducts.length > 0) {
      const minPrice = Math.min(...ownProducts.map(p => p.price));
      const targetProducts = ownProducts.filter(p => p.price === minPrice);
      
      for (const targetProduct of targetProducts) {
        targetProduct.popularity = Math.min(6, targetProduct.popularity + 1);
              }
      
      // „É≠„Ç∞Ë®òÈå≤
      if (G.playLog) {
        G.playLog.push({
          id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          round: G.round,
          phase: G.phase,
          actor: 'manufacturer-automata',
          action: 'È´òË©ï‰æ°„É¨„Éì„É•„Éº',
          details: `Ëá™Á§æÊúÄÂÆâÂïÜÂìÅ${targetProducts.length}ÂÄã„Å´È´òË©ï‰æ°`,
          timestamp: Date.now()
        });
      }
    }
  }
}

function executeResaleAutomata(G: GameState): void {
  // Ë¶èÂà∂Áô∫ÂãïÊÆµÈöé„Åß„ÅØËª¢Â£≤„É§„Éº„Éª„Ç™„Éº„Éà„Éû„Åå2„É©„Ç¶„É≥„ÉâË°åÂãïÂÅúÊ≠¢
  if (G.regulationStage === 'enforcement' && G.regulationStageRounds < 2) {
    console.log('üîÑ Ëª¢Â£≤„É§„Éº„Éª„Ç™„Éº„Éà„Éû: Ë¶èÂà∂Áô∫Âãï„Å´„Çà„ÇäË°åÂãïÂÅúÊ≠¢‰∏≠');
    // „É≠„Ç∞Ë®òÈå≤
    if (G.playLog) {
      G.playLog.push({
        id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        round: G.round,
        phase: G.phase,
        actor: 'resale-automata',
        action: 'Ë°åÂãïÂÅúÊ≠¢',
        details: 'Ë¶èÂà∂Áô∫Âãï„Å´„Çà„ÇäË°åÂãïÂÅúÊ≠¢‰∏≠',
        timestamp: Date.now()
      });
    }
    return;
  }
  
  // Ë≥áÈáë„Çí20„Åæ„ÅßËá™ÂãïË£úÂÖÖ
  if (G.automata.resaleOrganizationMoney < 20) {
    G.automata.resaleOrganizationMoney = 20;
  }
  
  const diceSum = rollDice() + rollDice();
    
  // 6,7,8„ÅØÊßòÂ≠êË¶ã
  if (diceSum >= 6 && diceSum <= 8) {
    
    // „É≠„Ç∞Ë®òÈå≤
    if (G.playLog) {
      G.playLog.push({
        id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        round: G.round,
        phase: G.phase,
        actor: 'resale-automata',
        action: 'ÊßòÂ≠êË¶ã',
        details: 'Ë≥ºÂÖ•„ÇíË¶ãÈÄÅ„Çä',
        timestamp: Date.now()
      });
    }
    return;
  }
  
  // Ë≥ºÂÖ•ÂèØËÉΩ„Å™ÂïÜÂìÅ„ÇíÂèéÈõÜÔºà‰æ°Ê†º„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂïÜÂìÅ„ÅÆ„ÅøÔºâ
  const allProducts: Product[] = [];
  for (const playerId in G.players) {
    allProducts.push(...G.players[playerId].personalMarket.filter(p => p.price > 0));
  }
  allProducts.push(...G.automata.market.filter(p => p.price > 0 && p.playerId === 'manufacturer-automata'));
  
  if (allProducts.length === 0) {
    console.log('üîÑ Ëª¢Â£≤„É§„Éº„Éª„Ç™„Éº„Éà„Éû: Ë≥ºÂÖ•ÂèØËÉΩ„Å™ÂïÜÂìÅ„Å™„Åó');
    return;
  }
  
  let targetProducts: Product[] = [];
  let actionName = '';
  
  if (diceSum <= 4) {
    // Â§ßÈáèË≤∑„ÅÑÂç†„ÇÅÔºöÊúÄÂÆâÂÄ§ÂïÜÂìÅ„Çí3ÂÄã„Åæ„ÅßÔºàË¶èÂà∂ÊÆµÈöé1„Åß„ÅØ-1ÂÄãÔºâ
    actionName = 'Â§ßÈáèË≤∑„ÅÑÂç†„ÇÅ';
    let maxPurchase = 3;
    if (G.regulationStage === 'public_comment') {
      maxPurchase = 2; // „Éë„Éñ„É™„ÉÉ„ÇØ„Ç≥„É°„É≥„ÉàÊÆµÈöé„Åß„ÅØÂ§ßÈáèË≤∑„ÅÑÂç†„ÇÅ-1ÂÄã
    }
    targetProducts = allProducts
      .filter(p => G.automata.resaleOrganizationMoney >= p.price)
      .sort((a, b) => a.price - b.price || b.popularity - a.popularity)
      .slice(0, maxPurchase);
  } else if (diceSum === 5 || diceSum === 9) {
    // ÈÅ∏Âà•Ë≥ºÂÖ•Ôºö‰∫∫Ê∞óÂ∫¶ÊúÄÈ´ò„ÅÆÂïÜÂìÅ„Çí1ÂÄã
    actionName = 'ÈÅ∏Âà•Ë≥ºÂÖ•';
    targetProducts = allProducts
      .filter(p => G.automata.resaleOrganizationMoney >= p.price)
      .sort((a, b) => b.popularity - a.popularity || a.price - b.price)
      .slice(0, 1);
  } else if (diceSum >= 10) {
    // ÊäïÊ©üË≥ºÂÖ•Ôºö„É©„É≥„ÉÄ„É†ÂïÜÂìÅ„Çí1ÂÄã
    actionName = 'ÊäïÊ©üË≥ºÂÖ•';
    const affordableProducts = allProducts.filter(p => G.automata.resaleOrganizationMoney >= p.price);
    if (affordableProducts.length > 0) {
      const randomIndex = Math.floor(Math.random() * affordableProducts.length);
      targetProducts = [affordableProducts[randomIndex]];
    }
  }
  
    
  let purchaseCount = 0;
  for (const product of targetProducts) {
    if (G.automata.resaleOrganizationMoney >= product.price) {
      G.automata.resaleOrganizationMoney -= product.price;
      
      // Ëª¢Â£≤‰æ°Ê†º„ÇíË®≠ÂÆöÔºà„ÉÄ„Ç§„ÇπÁµêÊûú„Å´Âøú„Åò„Å¶Ôºâ
      const resaleBonus = (diceSum >= 10) ? 8 : 5;
      let resalePrice = product.price + resaleBonus;
      
      // Ë¶èÂà∂ÊÆµÈöé„Å´„Çà„Çã‰æ°Ê†ºÂà∂Èôê„ÇíÈÅ©Áî®
      if (G.regulationStage === 'consideration') {
        resalePrice = Math.min(resalePrice, product.price + 3);
      } else if (G.regulationStage === 'enforcement') {
        resalePrice = Math.min(resalePrice, product.price + 1);
      }
      
      const resaleProduct: Product = {
        ...product,
        id: `resale-automata-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        price: resalePrice,
        isResale: true,
        originalCost: product.cost,
        originalPlayerId: product.playerId,
        playerId: 'resale-automata'
      };
      
      G.automata.market.push(resaleProduct);
      
      // „Ç∑„Éß„Éº„ÉàÂãïÁîª„Éñ„Éº„É†ÂäπÊûúÔºà„Ç™„Éº„Éà„Éû„ÅØË≥áÈáëÂ¢óÂä†„Å™„ÅóÔºâ
      if (G.shortVideoBonus) {
              }
      
      // ÂÖÉ„ÅÆÊâÄÊúâËÄÖ„Å´ÊîØÊâï„ÅÑ
      if (product.playerId === 'manufacturer-automata') {
        // „É°„Éº„Ç´„Éº„Éª„Ç™„Éº„Éà„Éû„Åã„ÇâË≥ºÂÖ•„Åó„ÅüÂ†¥Âêà„ÄÅ„Ç™„Éº„Éà„ÉûÂ∏ÇÂ†¥„Åã„ÇâÂâäÈô§
        const productIndex = G.automata.market.findIndex(p => p.id === product.id);
        if (productIndex !== -1) {
          G.automata.market.splice(productIndex, 1);
        }
      } else {
        // „Éó„É¨„Ç§„É§„Éº„Åã„ÇâË≥ºÂÖ•„Åó„ÅüÂ†¥Âêà
        const originalPlayer = G.players[product.playerId];
        if (originalPlayer) {
          originalPlayer.money += product.price;
          const productIndex = originalPlayer.personalMarket.findIndex(p => p.id === product.id);
          if (productIndex !== -1) {
            originalPlayer.personalMarket.splice(productIndex, 1);
          }
        }
      }
      
      G.marketPollution++;
      purchaseCount++;
      
          }
  }
  
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: G.phase,
      actor: 'resale-automata',
      action: actionName,
      details: `${purchaseCount}ÂÄã„ÅÆÂïÜÂìÅ„ÇíËª¢Â£≤Ë≥ºÂÖ•„ÄÅÂ∏ÇÂ†¥Ê±öÊüì+${purchaseCount}`,
      timestamp: Date.now()
    });
  }
}

function executeMarketPhase(G: GameState): void {
  const demandDice = rollDice() + rollDice();
    
  // Ë≤©Â£≤‰∏≠„ÅÆÂïÜÂìÅ„ÇíÂèéÈõÜÔºà‰æ°Ê†º„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂïÜÂìÅ„ÅÆ„ÅøÔºâ
  const allProducts: Product[] = [];
  for (const playerId in G.players) {
    allProducts.push(...G.players[playerId].personalMarket.filter(p => p.price > 0));
  }
  allProducts.push(...G.automata.market.filter(p => p.price > 0));
  
    
  // ÈúÄË¶ÅÂÄ§„Å´ÂêàËá¥„Åô„ÇãÂïÜÂìÅ„ÇíÈÅ∏Êäû
  const eligibleProducts = allProducts.filter(product => {
    const demandValues = getDemandValue(product.cost);
    return demandValues.includes(demandDice);
  });
  
    
  // ‰∫∫Ê∞óÂ∫¶È†Ü„ÄÅ‰æ°Ê†ºÈ†Ü„Åß„ÇΩ„Éº„Éà
  eligibleProducts.sort((a, b) => b.popularity - a.popularity || a.price - b.price);
  
  // ‰∏ä‰Ωç5ÂÄã„ÇíË≥ºÂÖ•
  const purchasedProducts = eligibleProducts.slice(0, 5);
    
  let totalSales = 0;
  for (const product of purchasedProducts) {
    // Rule.md„Å´Âæì„ÅÑËª¢Â£≤ÂïÜÂìÅ„ÅØÊ±öÊüì„Éö„Éä„É´„ÉÜ„Ç£„ÅÆÂΩ±Èüø„ÇíÂèó„Åë„Å™„ÅÑ
    const pollutionPenalty = product.isResale ? 0 : getPollutionPenalty(G.marketPollution);
    const actualPrice = Math.max(1, product.price - pollutionPenalty);
    
        
    if (product.playerId === 'manufacturer-automata' || product.playerId === 'resale-automata') {
      // „Ç™„Éº„Éà„Éû„ÅÆÂïÜÂìÅ„ÅÆÂ†¥Âêà
      const productIndex = G.automata.market.findIndex(p => p.id === product.id);
      if (productIndex !== -1) {
        G.automata.market.splice(productIndex, 1);
      }
    } else {
      // „Éó„É¨„Ç§„É§„Éº„ÅÆÂïÜÂìÅ„ÅÆÂ†¥Âêà
      const player = G.players[product.playerId];
      if (player) {
        player.money += actualPrice;
        const productIndex = player.personalMarket.findIndex(p => p.id === product.id);
        if (productIndex !== -1) {
          player.personalMarket.splice(productIndex, 1);
        }
              }
    }
    
    totalSales += actualPrice;
  }
  
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: G.phase,
      actor: 'market',
      action: 'ÈúÄË¶ÅÂá¶ÁêÜ',
      details: `ÈúÄË¶ÅÂÄ§${demandDice}„ÄÅ${purchasedProducts.length}ÂÄãË≤©Â£≤„ÄÅÁ∑èÂ£≤‰∏ä${totalSales}Ë≥áÈáë`,
      timestamp: Date.now()
    });
  }
}

function getPollutionPenalty(pollutionLevel: number): number {
  if (pollutionLevel <= 2) return 0;
  if (pollutionLevel <= 5) return 1;
  if (pollutionLevel <= 8) return 2;
  if (pollutionLevel <= 11) return 3;
  return 4;
}

function review(G: GameState, ctx: Ctx, targetPlayerId: string, productId: string, isPositive: boolean) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 1) return 'INVALID_MOVE';
  if (player.prestige < 1) return 'INVALID_MOVE';
  
  // action„Éï„Çß„Éº„Ç∫„Åß„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
  if (ctx.phase !== 'action') return 'INVALID_MOVE';
  
  let product;
  let targetName;
  
  // „Ç™„Éº„Éà„Éû„ÅÆÂïÜÂìÅ„ÅÆÂ†¥Âêà
  if (targetPlayerId === 'automata') {
    product = G.automata.market.find(p => p.id === productId);
    targetName = '„Ç™„Éº„Éà„Éû';
  } else {
    // „Éó„É¨„Ç§„É§„Éº„ÅÆÂïÜÂìÅ„ÅÆÂ†¥Âêà
    const targetPlayer = G.players[targetPlayerId];
    if (!targetPlayer) return 'INVALID_MOVE';
    product = targetPlayer.personalMarket.find(p => p.id === productId);
    targetName = targetPlayer.name;
  }
  
  if (!product) return 'INVALID_MOVE';
  
  player.prestige = Math.max(-5, player.prestige - 1);
  player.actionPoints -= 1;
  
  const oldPopularity = product.popularity;
  if (isPositive) {
    product.popularity = Math.min(6, product.popularity + 1);
  } else {
    product.popularity = Math.max(1, product.popularity - 1);
  }
  
    
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: ctx.phase || G.phase,
      actor: ctx.currentPlayer,
      action: isPositive ? 'È´òË©ï‰æ°„É¨„Éì„É•„Éº' : '‰ΩéË©ï‰æ°„É¨„Éì„É•„Éº',
      details: `${targetName}„ÅÆÂïÜÂìÅ„Å´${isPositive ? 'È´òË©ï‰æ°' : '‰ΩéË©ï‰æ°'}„ÄÅ‰∫∫Ê∞óÂ∫¶${oldPopularity}‚Üí${product.popularity}`,
      timestamp: Date.now()
    });
  }
}

function research(G: GameState, ctx: Ctx) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 1) return 'INVALID_MOVE';
  
  player.actionPoints -= 1;
  
  const dice = rollMultipleDice(3);
  const sum = dice.reduce((a, b) => a + b, 0);
  
  const trendEffect = getTrendEffect(sum);
  
  // „Éó„É¨„Ç§„É§„Éº„Å´„Éà„É¨„É≥„ÉâÊÉÖÂ†±„ÇíÊèê‰æõ
  if (!G.availableTrends) {
    G.availableTrends = {};
  }
  
  G.availableTrends[ctx.currentPlayer] = {
    sum,
    effect: trendEffect,
    playerId: ctx.currentPlayer
  };
  
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: ctx.phase || G.phase,
      actor: ctx.currentPlayer,
      action: '„É™„Çµ„Éº„ÉÅ',
      details: `„Éà„É¨„É≥„ÉâË™øÊüª: ${trendEffect.name}`,
      timestamp: Date.now()
    });
  }
}

function partTimeWork(G: GameState, ctx: Ctx) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 2) return 'INVALID_MOVE';
  
  // action„Éï„Çß„Éº„Ç∫„Åß„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
  if (ctx.phase !== 'action') return 'INVALID_MOVE';
  
  player.money += 5;
  player.actionPoints -= 2;
}

function buyBack(G: GameState, ctx: Ctx, productId: string) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 1) return 'INVALID_MOVE';
  
  const productIndex = player.personalMarket.findIndex(p => p.id === productId);
  if (productIndex === -1) return 'INVALID_MOVE';
  
  player.personalMarket.splice(productIndex, 1);
  player.actionPoints -= 1;
}

function discontinue(G: GameState, ctx: Ctx, designId: string) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 1) return 'INVALID_MOVE';
  
  const designIndex = player.designs.findIndex(d => d.id === designId);
  if (designIndex === -1) return 'INVALID_MOVE';
  
  player.designs.splice(designIndex, 1);
  player.actionPoints -= 1;
}

function resale(G: GameState, ctx: Ctx, targetPlayerId: string, productId: string, resalePrice: number) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 2) return 'INVALID_MOVE';
  
  // Ëª¢Â£≤„ÅØÊÇ™„ÅÆÊâÄÊ•≠„Å™„ÅÆ„ÅßÂ®ÅÂé≥„ÅåÊúÄ‰Ωé(-5)„Åß„ÇÇÂÆüË°åÂèØËÉΩ
  
  let product;
  let targetName;
  
  // „Ç™„Éº„Éà„Éû„ÅÆÂïÜÂìÅ„ÅÆÂ†¥Âêà
  if (targetPlayerId === 'automata') {
    const productIndex = G.automata.market.findIndex(p => p.id === productId);
    if (productIndex === -1) return 'INVALID_MOVE';
    
    product = G.automata.market[productIndex];
    targetName = '„Ç™„Éº„Éà„Éû';
    
    if (player.money < product.price) return 'INVALID_MOVE';
    
    const resaleBonus = getResaleBonus(player.resaleHistory);
    let maxResalePrice = Math.min(24, product.price + resaleBonus);
    
    // Ë¶èÂà∂ÊÆµÈöé„Å´„Çà„Çã‰æ°Ê†ºÂà∂Èôê„ÇíÈÅ©Áî®
    if (G.regulationStage === 'consideration') {
      maxResalePrice = Math.min(maxResalePrice, product.price + 3);
    } else if (G.regulationStage === 'enforcement') {
      maxResalePrice = Math.min(maxResalePrice, product.price + 1);
    }
    
    if (resalePrice > maxResalePrice) return 'INVALID_MOVE';
    
    player.money -= product.price;
    // „Ç™„Éº„Éà„Éû„ÅØË≥áÈáë„ÇíÂèó„ÅëÂèñ„Çâ„Å™„ÅÑÔºàÁÑ°ÈôêË≥áÈáëÔºâ
    player.actionPoints -= 2;
    player.prestige = Math.max(-5, player.prestige - 1);
    player.resaleHistory += 1;
    
    G.automata.market.splice(productIndex, 1);
  } else {
    // „Éó„É¨„Ç§„É§„Éº„ÅÆÂïÜÂìÅ„ÅÆÂ†¥Âêà
    const targetPlayer = G.players[targetPlayerId];
    if (!targetPlayer) return 'INVALID_MOVE';
    
    const productIndex = targetPlayer.personalMarket.findIndex(p => p.id === productId);
    if (productIndex === -1) return 'INVALID_MOVE';
    
    product = targetPlayer.personalMarket[productIndex];
    targetName = targetPlayer.name;
    
    if (player.money < product.price) return 'INVALID_MOVE';
    
    const resaleBonus = getResaleBonus(player.resaleHistory);
    let maxResalePrice = Math.min(24, product.price + resaleBonus);
    
    // Ë¶èÂà∂ÊÆµÈöé„Å´„Çà„Çã‰æ°Ê†ºÂà∂Èôê„ÇíÈÅ©Áî®
    if (G.regulationStage === 'consideration') {
      maxResalePrice = Math.min(maxResalePrice, product.price + 3);
    } else if (G.regulationStage === 'enforcement') {
      maxResalePrice = Math.min(maxResalePrice, product.price + 1);
    }
    
    if (resalePrice > maxResalePrice) return 'INVALID_MOVE';
    
    player.money -= product.price;
    targetPlayer.money += product.price;
    player.actionPoints -= 2;
    player.prestige = Math.max(-5, player.prestige - 1);
    player.resaleHistory += 1;
    
    targetPlayer.personalMarket.splice(productIndex, 1);
  }
  
  const resaleProduct: Product = {
    ...product,
    id: `resale-${ctx.currentPlayer}-${Date.now()}`,
    price: resalePrice,
    isResale: true,
    originalCost: product.cost,
    originalPlayerId: product.playerId,
    playerId: ctx.currentPlayer
  };
  
  player.personalMarket.push(resaleProduct);
  G.marketPollution++;
  
  // „Ç∑„Éß„Éº„ÉàÂãïÁîª„Éñ„Éº„É†ÂäπÊûú
  if (G.shortVideoBonus) {
    player.money += 2;
      }
  
    
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: ctx.phase || G.phase,
      actor: ctx.currentPlayer,
      action: 'Ëª¢Â£≤',
      details: `${targetName}„ÅÆÂïÜÂìÅ(„Ç≥„Çπ„Éà${product.cost})„Çí${product.price}Ë≥áÈáë„ÅßË≥ºÂÖ•„ÄÅ${resalePrice}Ë≥áÈáë„ÅßËª¢Â£≤„ÄÅÂ®ÅÂé≥-1„ÄÅËª¢Â£≤Â±•Ê≠¥+1„ÄÅÂ∏ÇÂ†¥Ê±öÊüì+1`,
      timestamp: Date.now()
    });
  }
}

function getResaleBonus(resaleHistory: number): number {
  if (resaleHistory <= 1) return 5;
  if (resaleHistory <= 4) return 8;
  if (resaleHistory <= 7) return 11;
  return 15;
}

function design(G: GameState, ctx: Ctx, isOpenSource: boolean = false) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 2) return 'INVALID_MOVE';
  if (player.designs.length >= 6) return 'INVALID_MOVE';
  
  // action„Éï„Çß„Éº„Ç∫„Åß„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
  if (ctx.phase !== 'action') return 'INVALID_MOVE';
  
  const designDice = rollMultipleDice(3);
  const selectedCost = designDice[Math.floor(Math.random() * 3)];
  
  const newDesign: Design = {
    id: `design-${ctx.currentPlayer}-${Date.now()}`,
    cost: selectedCost,
    isOpenSource
  };
  
  player.designs.push(newDesign);
  player.actionPoints -= 2;
  
  if (isOpenSource) {
    player.prestige += 2;
  }
}

function promoteRegulation(G: GameState, ctx: Ctx) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 2) return 'INVALID_MOVE';
  
  const diceRolls = rollMultipleDice(2); // 2ÂÄã„ÅÆ„ÉÄ„Ç§„Çπ„ÇíÊåØ„Çã
  const regulationDice = diceRolls[0] + diceRolls[1]; // ÂêàË®àÂÄ§„ÇíË®àÁÆó
  
  // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞ÔºöÂ∏∏„Å´„ÉÄ„Ç§„ÇπÂá∫ÁõÆ„ÇíË®òÈå≤
  console.log(`üé≤ Ë¶èÂà∂Êé®ÈÄ≤„ÉÄ„Ç§„Çπ: ${diceRolls[0]} + ${diceRolls[1]} = ${regulationDice}`);
  
  // Ë¶èÂà∂Êé®ÈÄ≤ÊàêÂäüÔºàÂêàË®à9‰ª•‰∏äÔºâ
  if (regulationDice >= 9) {
    console.log(`‚úÖ Ë¶èÂà∂Êé®ÈÄ≤ÊàêÂäü: ${regulationDice} >= 9`);
    switch (G.regulationStage) {
      case 'none':
        // ÊÆµÈöé1Ôºö„Éë„Éñ„É™„ÉÉ„ÇØ„Ç≥„É°„É≥„ÉàÈñãÂßã
        G.regulationStage = 'public_comment';
        G.regulationStageRounds = 0;
        G.regulationLevel = 1;
        console.log(`üì¢ Ë¶èÂà∂ÊÆµÈöé1: „Éë„Éñ„É™„ÉÉ„ÇØ„Ç≥„É°„É≥„ÉàÈñãÂßã`);
        addPlayLog(G, ctx.currentPlayer, 'Ë¶èÂà∂Êé®ÈÄ≤', `Ë¶èÂà∂Êé®ÈÄ≤ÊàêÂäüÔºà„ÉÄ„Ç§„Çπ: ${diceRolls[0]}+${diceRolls[1]}=${regulationDice}Ôºâ- „Éë„Éñ„É™„ÉÉ„ÇØ„Ç≥„É°„É≥„ÉàÂãüÈõÜÈñãÂßã`);
        break;
        
      case 'public_comment':
        // ÊÆµÈöé2ÔºöÊ§úË®éÊÆµÈöé„Å´ÁßªË°å
        G.regulationStage = 'consideration';
        G.regulationStageRounds = 0;
        G.regulationLevel = 2;
        addPlayLog(G, ctx.currentPlayer, 'Ë¶èÂà∂Êé®ÈÄ≤', `Ë¶èÂà∂Êé®ÈÄ≤ÊàêÂäüÔºà„ÉÄ„Ç§„Çπ: ${diceRolls[0]}+${diceRolls[1]}=${regulationDice}Ôºâ- Ë¶èÂà∂Ê§úË®é‰∏≠„ÄÅËª¢Â£≤‰æ°Ê†ºÂà∂ÈôêÔºàË≥ºÂÖ•‰æ°Ê†º+3Ë≥áÈáë„Åæ„ÅßÔºâ`);
        break;
        
      case 'consideration':
        // ÊÆµÈöé3ÔºöË¶èÂà∂Áô∫Âãï
        G.regulationStage = 'enforcement';
        G.regulationStageRounds = 0;
        G.regulationLevel = 3;
        
        // ÂÖ®Ëª¢Â£≤ÂìÅÊ≤°Âèé
        for (const playerId in G.players) {
          const p = G.players[playerId];
          p.personalMarket = p.personalMarket.filter(product => !product.isResale);
          // Ëª¢Â£≤Â±•Ê≠¥√ó2Ë≥áÈáëÊ≤°Âèé
          const penalty = Math.min(p.resaleHistory * 2, p.money);
          p.money = Math.max(0, p.money - penalty);
        }
        
        // „Ç™„Éº„Éà„ÉûÂ∏ÇÂ†¥„Åã„Çâ„ÇÇËª¢Â£≤ÂìÅÈô§Âéª
        G.automata.market = G.automata.market.filter(product => !product.isResale);
        
        addPlayLog(G, ctx.currentPlayer, 'Ë¶èÂà∂Êé®ÈÄ≤', `Ë¶èÂà∂Êé®ÈÄ≤ÊàêÂäüÔºà„ÉÄ„Ç§„Çπ: ${diceRolls[0]}+${diceRolls[1]}=${regulationDice}Ôºâ- Ëª¢Â£≤Ë¶èÂà∂Áô∫Âãï„ÄÅÂÖ®Ëª¢Â£≤ÂìÅÊ≤°Âèé„ÄÅËª¢Â£≤‰æ°Ê†ºÂà∂ÈôêÔºàË≥ºÂÖ•‰æ°Ê†º+1Ë≥áÈáë„Åæ„ÅßÔºâ`);
        break;
        
      case 'enforcement':
        // Êó¢„Å´ÊúÄÂ§ßÊÆµÈöé„Å™„ÅÆ„Åß‰Ωï„ÇÇ„Åó„Å™„ÅÑ
        addPlayLog(G, ctx.currentPlayer, 'Ë¶èÂà∂Êé®ÈÄ≤', `„ÉÄ„Ç§„Çπ: ${diceRolls[0]}+${diceRolls[1]}=${regulationDice} - Ë¶èÂà∂„ÅØÊó¢„Å´ÊúÄÂ§ß„É¨„Éô„É´„Åß„Åô`);
        break;
    }
  } else {
    // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞ÔºöÂ§±ÊïóÊôÇ„ÇÇÁ¢∫Ë™ç
    console.log(`‚ùå Ë¶èÂà∂Êé®ÈÄ≤Â§±Êïó: ${regulationDice} < 9`);
    addPlayLog(G, ctx.currentPlayer, 'Ë¶èÂà∂Êé®ÈÄ≤', `Ë¶èÂà∂Êé®ÈÄ≤Â§±ÊïóÔºà„ÉÄ„Ç§„Çπ: ${diceRolls[0]}+${diceRolls[1]}=${regulationDice}„ÄÅÂøÖË¶Å: 9‰ª•‰∏äÔºâ`);
  }
  
  player.actionPoints -= 2;
  
  // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞Ôºö„É≠„Ç∞ËøΩÂä†Á¢∫Ë™ç
  console.log(`üìã „Éó„É¨„Ç§„É≠„Ç∞ËøΩÂä†ÂÆå‰∫Ü„ÄÇÁèæÂú®„ÅÆ„É≠„Ç∞Êï∞: ${G.playLog?.length || 0}`);
}

function dayLabor(G: GameState, ctx: Ctx) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 3) return 'INVALID_MOVE';
  if (player.money > 100) return 'INVALID_MOVE';
  
  // action„Éï„Çß„Éº„Ç∫„Åß„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
  if (ctx.phase !== 'action') return 'INVALID_MOVE';
  
  player.money += 18;
  player.actionPoints -= 3;
}

function activateTrend(G: GameState, ctx: Ctx) {
  const player = G.players[ctx.currentPlayer];
  if (!player) {
    console.error('ActivateTrend: Player not found');
    return 'INVALID_MOVE';
  }
  if (!G.availableTrends || !G.availableTrends[ctx.currentPlayer]) {
    console.error('ActivateTrend: No available trend for player');
    return 'INVALID_MOVE';
  }
  
  const trendData = G.availableTrends[ctx.currentPlayer];
  const effect = trendData.effect;
  
  // „Ç≥„Çπ„Éà„ÉÅ„Çß„ÉÉ„ÇØ
  if (effect.cost && effect.cost.prestige && player.prestige < effect.cost.prestige) {
    console.error('ActivateTrend: Insufficient prestige');
    return 'INVALID_MOVE';
  }
  
  // „Ç≥„Çπ„ÉàÊîØÊâï„ÅÑ
  if (effect.cost && effect.cost.prestige) {
    player.prestige = Math.max(-5, player.prestige - effect.cost.prestige);
  }
  
  // ÂäπÊûúÂÆüË°å
  executeTrendEffect(G, effect, ctx.currentPlayer);
  
  // „Éà„É¨„É≥„Éâ„ÇíÊ∂àË≤ª
  delete G.availableTrends[ctx.currentPlayer];
  
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: ctx.phase || G.phase,
      actor: ctx.currentPlayer,
      action: '„Éà„É¨„É≥„ÉâÁô∫Âãï',
      details: `${effect.name}„ÇíÁô∫Âãï`,
      timestamp: Date.now()
    });
  }
}

function purchasePrestige(G: GameState, ctx: Ctx) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 1) return 'INVALID_MOVE';
  if (player.money < 5) return 'INVALID_MOVE';
  
  // action„Éï„Çß„Éº„Ç∫„Åß„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
  if (ctx.phase !== 'action') return 'INVALID_MOVE';
  
  // 1„É©„Ç¶„É≥„Éâ‰∏≠„Å´1Âõû„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ„ÉÅ„Çß„ÉÉ„ÇØ
  if (!G.prestigePurchasePerRound) {
    G.prestigePurchasePerRound = {};
  }
  
  const purchaseKey = `${G.round}-${ctx.currentPlayer}`;
  if (G.prestigePurchasePerRound[purchaseKey]) {
    return 'INVALID_MOVE'; // Êó¢„Å´„Åì„ÅÆ„É©„Ç¶„É≥„Éâ„ÅßÂ®ÅÂé≥Ë≥ºÂÖ•Ê∏à„Åø
  }
  
  // Â®ÅÂé≥Ë≥ºÂÖ•ÂÆüË°å
  player.money -= 5;
  player.prestige += 1;
  player.actionPoints -= 1;
  
  // „Åì„ÅÆ„É©„Ç¶„É≥„Éâ„ÅßÂ®ÅÂé≥Ë≥ºÂÖ•„Åó„Åü„Åì„Å®„ÇíË®òÈå≤
  G.prestigePurchasePerRound[purchaseKey] = true;
  
    
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: ctx.phase || G.phase,
      actor: ctx.currentPlayer,
      action: 'Â®ÅÂé≥Ë≥ºÂÖ•',
      details: `5Ë≥áÈáë„ÅßÂ®ÅÂé≥1„Éù„Ç§„É≥„ÉàË≥ºÂÖ• (Â®ÅÂé≥: ${player.prestige - 1} ‚Üí ${player.prestige})`,
      timestamp: Date.now()
    });
  }
}

function outsourceReview(G: GameState, ctx: Ctx, targetPlayerId: string, productId: string, isPositive: boolean) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 1) return 'INVALID_MOVE';
  
  // action„Éï„Çß„Éº„Ç∫„Åß„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
  if (ctx.phase !== 'action') return 'INVALID_MOVE';
  
  // Ë≥áÈáë„ÉÅ„Çß„ÉÉ„ÇØÔºàÈ´òË©ï‰æ°„Éª‰ΩéË©ï‰æ°„Å®„ÇÇ„Å´3Ë≥áÈáëÔºâ
  if (player.money < 3) return 'INVALID_MOVE';
  
  let product;
  let targetName;
  
  // „Ç™„Éº„Éà„Éû„ÅÆÂïÜÂìÅ„ÅÆÂ†¥Âêà
  if (targetPlayerId === 'automata') {
    product = G.automata.market.find(p => p.id === productId);
    targetName = '„Ç™„Éº„Éà„Éû';
  } else {
    // „Éó„É¨„Ç§„É§„Éº„ÅÆÂïÜÂìÅ„ÅÆÂ†¥Âêà
    const targetPlayer = G.players[targetPlayerId];
    if (!targetPlayer) return 'INVALID_MOVE';
    product = targetPlayer.personalMarket.find(p => p.id === productId);
    targetName = targetPlayer.name;
  }
  
  if (!product) return 'INVALID_MOVE';
  
  player.money -= 3;
  player.actionPoints -= 1;
  
  const oldPopularity = product.popularity;
  if (isPositive) {
    product.popularity = Math.min(6, product.popularity + 1);
  } else {
    product.popularity = Math.max(1, product.popularity - 1);
  }
  
  // Áô∫Ë¶öÂà§ÂÆöÔºà6Èù¢„ÉÄ„Ç§„Çπ„Åß1„ÅåÂá∫„Çã„Å®Â®ÅÂé≥-2Ôºâ
  const detectionRoll = rollDice();
  let detected = false;
  if (detectionRoll === 1) {
    player.prestige = Math.max(-5, player.prestige - 2);
    detected = true;
      } else {
      }
  
    
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: ctx.phase || G.phase,
      actor: ctx.currentPlayer,
      action: '„É¨„Éì„É•„ÉºÂ§ñÊ≥®',
      details: `${targetName}„ÅÆÂïÜÂìÅ„Å´${isPositive ? 'È´òË©ï‰æ°' : '‰ΩéË©ï‰æ°'}Â§ñÊ≥®„ÄÅ‰∫∫Ê∞óÂ∫¶${oldPopularity}‚Üí${product.popularity}${detected ? '„ÄÅÁô∫Ë¶ö„Å´„Çà„ÇäÂ®ÅÂé≥-2' : ''}`,
      timestamp: Date.now()
    });
  }
}

function outsourceManufacturing(G: GameState, ctx: Ctx, designId: string, quantity: number, targetType: 'automata' | 'player', targetPlayerId?: string) {
  const player = G.players[ctx.currentPlayer];
  if (!player || player.actionPoints < 1) return 'INVALID_MOVE';
  
  // Â®ÅÂé≥Âà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
  if (player.prestige < -5) return 'INVALID_MOVE';
  
  // action„Éï„Çß„Éº„Ç∫„Åß„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
  if (ctx.phase !== 'action') return 'INVALID_MOVE';
  
  // Ë®≠Ë®à„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºàËá™ÂàÜ„ÅÆË®≠Ë®à„Åæ„Åü„ÅØ‰ªñ„Éó„É¨„Ç§„É§„Éº„ÅÆ„Ç™„Éº„Éó„É≥„ÇΩ„Éº„ÇπË®≠Ë®àÔºâ
  let design = player.designs.find(d => d.id === designId);
  let designOwner = ctx.currentPlayer;
  let isOpenSource = false;
  
  // Ëá™ÂàÜ„ÅÆË®≠Ë®à„Åß„Å™„ÅÑÂ†¥Âêà„ÄÅ„Ç™„Éº„Éó„É≥„ÇΩ„Éº„ÇπË®≠Ë®à„ÇíÊé¢„Åô
  if (!design) {
    for (const playerId in G.players) {
      const otherPlayer = G.players[playerId];
      const openSourceDesign = otherPlayer.designs.find(d => d.id === designId && d.isOpenSource);
      if (openSourceDesign) {
        design = openSourceDesign;
        designOwner = playerId;
        isOpenSource = true;
        break;
      }
    }
  }
  
  if (!design) return 'INVALID_MOVE';
  
  if (targetType === 'automata') {
    // „Ç™„Éº„Éà„ÉûÂ§ñÊ≥®ÔºöË£ΩÈÄ†‰æùÈ†ºÊï∞√ó(Ë£ΩÈÄ†„Ç≥„Çπ„Éà+2)
    const totalCost = quantity * (design.cost + 2);
    if (player.money < totalCost) return 'INVALID_MOVE';
    
    player.money -= totalCost;
    player.actionPoints -= 1;
    
    // Âç≥Â∫ß„Å´ÊåáÂÆöÂÄãÊï∞Ë£ΩÈÄ†
    for (let i = 0; i < quantity; i++) {
      const product: Product = {
        id: `product-${ctx.currentPlayer}-${Date.now()}-${i}`,
        cost: design.cost,
        price: 0,
        popularity: 1,
        playerId: ctx.currentPlayer,
        isResale: false
      };
      player.personalMarket.push(product);
    }
    
    // „Ç™„Éº„Éó„É≥„ÇΩ„Éº„ÇπÂ§ñÊ≥®Êñô
    if (isOpenSource && designOwner !== ctx.currentPlayer) {
      const outsourceFee = Math.min(G.round, 8);
      const designOwnerPlayer = G.players[designOwner];
      if (designOwnerPlayer) {
        designOwnerPlayer.money += outsourceFee * quantity;
              }
    }
    
        
    // „É≠„Ç∞Ë®òÈå≤
    if (G.playLog) {
      G.playLog.push({
        id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        round: G.round,
        phase: ctx.phase || G.phase,
        actor: ctx.currentPlayer,
        action: '„Ç™„Éº„Éà„ÉûÂ§ñÊ≥®',
        details: `„Ç≥„Çπ„Éà${design.cost}„ÅÆÂïÜÂìÅ„Çí${quantity}ÂÄãË£ΩÈÄ†„ÄÅÁ∑èÈ°ç${totalCost}Ë≥áÈáë${isOpenSource ? `„ÄÅÂ§ñÊ≥®Êñô${Math.min(G.round, 8) * quantity}Ë≥áÈáë` : ''}`,
        timestamp: Date.now()
      });
    }
    
  } else if (targetType === 'player' && targetPlayerId) {
    // „Éó„É¨„Ç§„É§„ÉºÂ§ñÊ≥®
    const targetPlayer = G.players[targetPlayerId];
    if (!targetPlayer || targetPlayerId === ctx.currentPlayer) return 'INVALID_MOVE';
    
    if (player.money < design.cost) return 'INVALID_MOVE';
    
    // Ë£ΩÈÄ†Â§ñÊ≥®„Ç™„Éº„ÉÄ„Éº„Çí‰ΩúÊàêÔºàpendingÁä∂ÊÖãÔºâ
    if (!G.pendingManufacturingOrders) {
      G.pendingManufacturingOrders = [];
    }
    
    const order: ManufacturingOrder = {
      id: `order-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      clientId: ctx.currentPlayer,
      contractorId: targetPlayerId,
      designId: designId,
      cost: design.cost,
      round: G.round,
      status: 'pending'
    };
    
    G.pendingManufacturingOrders.push(order);
    
    // AP„ÇíÊ∂àË≤ªÔºàÊãíÂê¶„Åï„Çå„ÅüÂ†¥Âêà„ÅØÂæå„ÅßËøîÂç¥Ôºâ
    player.actionPoints -= 1;
    
        
    // „É≠„Ç∞Ë®òÈå≤
    if (G.playLog) {
      G.playLog.push({
        id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        round: G.round,
        phase: ctx.phase || G.phase,
        actor: ctx.currentPlayer,
        action: '„Éó„É¨„Ç§„É§„ÉºÂ§ñÊ≥®‰æùÈ†º',
        details: `${targetPlayer.name}„Å´Ë£ΩÈÄ†‰æùÈ†º„ÄÅ„Ç≥„Çπ„Éà${design.cost}`,
        timestamp: Date.now()
      });
    }
  }
}

function respondToManufacturingOrder(G: GameState, ctx: Ctx, orderId: string, accept: boolean) {
  const player = G.players[ctx.currentPlayer];
  if (!player) return 'INVALID_MOVE';
  
  if (!G.pendingManufacturingOrders) return 'INVALID_MOVE';
  
  const orderIndex = G.pendingManufacturingOrders.findIndex(order => 
    order.id === orderId && 
    order.contractorId === ctx.currentPlayer && 
    order.status === 'pending'
  );
  
  if (orderIndex === -1) return 'INVALID_MOVE';
  
  const order = G.pendingManufacturingOrders[orderIndex];
  const client = G.players[order.clientId];
  
  if (!client) return 'INVALID_MOVE';
  
  if (accept) {
    // Â§ñÊ≥®„ÇíÂèóË´æ
    order.status = 'accepted';
    
    // ‰æùÈ†ºËÄÖ„Åã„ÇâË£ΩÈÄ†„Ç≥„Çπ„Éà„ÇíÂèó„ÅëÂèñ„Çã
    client.money -= order.cost;
    player.money += order.cost;
    
    // Ê¨°„É©„Ç¶„É≥„Éâ„ÅßAP„Çí1Ê∂àË≤ª„Åô„Çã‰∫àÂÆö„ÇíË®òÈå≤
    // „Åì„Çå„ÅØÊ¨°„É©„Ç¶„É≥„ÉâÈñãÂßãÊôÇ„Å´Âá¶ÁêÜ„Åï„Çå„Çã
    
    // Ë®≠Ë®à„ÇíÂèñÂæó„Åó„Å¶Ë£ΩÈÄ†
    let design = null;
    let designOwner = null;
    let isOpenSource = false;
    
    // „Åæ„Åö‰æùÈ†ºËÄÖ„ÅÆË®≠Ë®à„ÇíÊé¢„Åô
    design = client.designs.find(d => d.id === order.designId);
    if (design) {
      designOwner = order.clientId;
    } else {
      // „Ç™„Éº„Éó„É≥„ÇΩ„Éº„ÇπË®≠Ë®à„ÇíÊé¢„Åô
      for (const playerId in G.players) {
        const otherPlayer = G.players[playerId];
        const openSourceDesign = otherPlayer.designs.find(d => d.id === order.designId && d.isOpenSource);
        if (openSourceDesign) {
          design = openSourceDesign;
          designOwner = playerId;
          isOpenSource = true;
          break;
        }
      }
    }
    
    if (design) {
      // ÂïÜÂìÅ„ÇíË£ΩÈÄ†„Åó„Å¶‰æùÈ†ºËÄÖ„Å´Ê∏°„Åô
      const product: Product = {
        id: `product-${order.clientId}-${Date.now()}`,
        cost: design.cost,
        price: 0,
        popularity: 1,
        playerId: order.clientId,
        isResale: false
      };
      client.personalMarket.push(product);
      
      // „Ç™„Éº„Éó„É≥„ÇΩ„Éº„ÇπÂ§ñÊ≥®Êñô
      if (isOpenSource && designOwner && designOwner !== order.clientId) {
        const outsourceFee = Math.min(G.round, 8);
        const designOwnerPlayer = G.players[designOwner];
        if (designOwnerPlayer) {
          designOwnerPlayer.money += outsourceFee;
                  }
      }
      
            
      // „É≠„Ç∞Ë®òÈå≤
      if (G.playLog) {
        G.playLog.push({
          id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          round: G.round,
          phase: ctx.phase || G.phase,
          actor: ctx.currentPlayer,
          action: 'Â§ñÊ≥®ÂèóË´æ',
          details: `${client.name}„ÅÆË£ΩÈÄ†‰æùÈ†º„ÇíÂèóË´æ„ÄÅ„Ç≥„Çπ„Éà${design.cost}„ÅÆÂïÜÂìÅ„ÇíË£ΩÈÄ†${isOpenSource ? `„ÄÅÂ§ñÊ≥®Êñô${Math.min(G.round, 8)}Ë≥áÈáë` : ''}`,
          timestamp: Date.now()
        });
      }
    }
    
    // „Ç™„Éº„ÉÄ„Éº„ÇíÂÆå‰∫ÜÁä∂ÊÖã„Å´
    order.status = 'completed';
    
  } else {
    // Â§ñÊ≥®„ÇíÊãíÂê¶
    order.status = 'rejected';
    
    // ‰æùÈ†ºËÄÖ„ÅÆAP„ÇíËøîÂç¥
    client.actionPoints += 1;
    
        
    // „É≠„Ç∞Ë®òÈå≤
    if (G.playLog) {
      G.playLog.push({
        id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        round: G.round,
        phase: ctx.phase || G.phase,
        actor: ctx.currentPlayer,
        action: 'Â§ñÊ≥®ÊãíÂê¶',
        details: `${client.name}„ÅÆË£ΩÈÄ†‰æùÈ†º„ÇíÊãíÂê¶„ÄÅ‰æùÈ†ºËÄÖ„ÅÆAP„ÇíËøîÈÇÑ`,
        timestamp: Date.now()
      });
    }
  }
  
  // Âá¶ÁêÜÊ∏à„Åø„Ç™„Éº„ÉÄ„Éº„ÇíÂâäÈô§
  G.pendingManufacturingOrders.splice(orderIndex, 1);
}

function getTrendEffect(sum: number) {
  const effects: { [key: number]: { name: string; description: string; cost: { prestige?: number } | null } } = {
    3: { name: 'ÁµåÊ∏àÁâπÈúÄ', description: 'ÂÖ®„Éó„É¨„Ç§„É§„Éº„Å´+15Ë≥áÈáë', cost: null },
    4: { name: 'ÊäÄË°ìÈù©Êñ∞', description: 'Ëá™Ë∫´„ÅÆ‰ªªÊÑè„ÅÆË®≠Ë®à1„Å§„ÅÆ„ÉÄ„Ç§„ÇπÂÄ§-1', cost: null },
    5: { name: '„Ç§„É≥„Éï„É´„Ç®„É≥„Çµ„ÉºÁ¥π‰ªã', description: 'Ëá™Ë∫´„ÅÆÂÖ®ÂïÜÂìÅ„ÅÆ‰∫∫Ê∞óÂ∫¶„Çí+1', cost: null },
    6: { name: 'Ê±öÊüìÊîπÂñÑ„Ç≠„É£„É≥„Éö„Éº„É≥', description: 'Â∏ÇÂ†¥Ê±öÊüì„É¨„Éô„É´„Çí-2', cost: null },
    7: { name: '„Çµ„Çπ„ÉÜ„Éä„Éì„É™„ÉÜ„Ç£', description: '‰ªªÊÑè„ÅÆÂïÜÂìÅ„ÅÆ‰∫∫Ê∞óÂ∫¶„Çí+3Ôºà‰ªªÊÑè„ÅÆÁµÑ„ÅøÂêà„Çè„ÅõÔºâ', cost: { prestige: 1 } },
    8: { name: 'DIY„Éñ„Éº„É†', description: 'ÂÖ®„Å¶„ÅÆ„Éó„É¨„Ç§„É§„Éº„ÅÆÊúÄÊñ∞Ë®≠Ë®à„ÅÆ„ÉÄ„Ç§„ÇπÂÄ§-1', cost: null },
    9: { name: '„Ç§„É≥„Éï„É¨ÈÄ≤Ë°å', description: 'ÂÖ®„Å¶„ÅÆËª¢Â£≤„Åß„ÅØ„Å™„ÅÑÂïÜÂìÅ„ÅÆ‰æ°Ê†º+2ÔºàÁô∫ÂãïÂæåÊ∞∏Á∂öÔºâ', cost: null },
    10: { name: '„Ç∑„Éß„Éº„ÉàÂãïÁîª„Éñ„Éº„É†', description: 'Ëª¢Â£≤„ÅåÊàêÂäü„Åô„Çã„Åü„Å≥„Å´+2Ë≥áÈáë„Éú„Éº„Éä„ÇπÔºàÁô∫ÂãïÂæåÊ∞∏Á∂öÔºâ', cost: null },
    11: { name: '„Ç∑„Éß„Éº„ÉàÂãïÁîª„Éñ„Éº„É†', description: 'Ëª¢Â£≤„ÅåÊàêÂäü„Åô„Çã„Åü„Å≥„Å´+2Ë≥áÈáë„Éú„Éº„Éä„ÇπÔºàÁô∫ÂãïÂæåÊ∞∏Á∂öÔºâ', cost: null },
    12: { name: '„ÉÜ„É¨„ÉØ„Éº„ÇØÈúÄË¶Å', description: '‰æ°Ê†º10‰ª•‰∏ã„ÅÆÂÖ®ÂïÜÂìÅ„ÅÆ‰∫∫Ê∞óÂ∫¶„Çí+1', cost: null },
    13: { name: '„ÇÆ„Éï„ÉàÈúÄË¶Å', description: '‰∫∫Ê∞óÂ∫¶3‰ª•‰∏ã„ÅÆÂÖ®ÂïÜÂìÅ„ÅÆ‰∫∫Ê∞óÂ∫¶„Çí+1', cost: null },
    14: { name: 'Á∑ëÂåñ‰øÉÈÄ≤', description: 'Â∏ÇÂ†¥Ê±öÊüì„É¨„Éô„É´„Çí-3', cost: { prestige: 3 } },
    15: { name: 'Ê∂àË≤ªËÄÖ‰∏ç‰ø°', description: '„ÅÇ„Å™„Åü‰ª•Â§ñ„ÅÆÂÖ®„Éó„É¨„Ç§„É§„Éº„ÅÆÂ®ÅÂé≥-1', cost: { prestige: 2 } },
    16: { name: 'Â∏ÇÂ†¥ÈñãÊîæ', description: '„ÉÄ„Ç§„Çπ„Çí3„Å§Âºï„Åç„ÄÅ„Ç≥„Çπ„Éà0„ÅßË®≠Ë®àÔºà„Ç™„Éº„Éó„É≥„ÇΩ„Éº„Çπ‰∏çÂèØÔºâ„ÄÅË£ΩÈÄ†„ÄÅË≤©Â£≤„ÇíË°å„ÅÜ„Åì„Å®„Åå„Åß„Åç„Çã„ÄÇ‰ΩøÁî®„Åó„Å™„Åã„Å£„Åü„ÉÄ„Ç§„Çπ„ÅØ„ÉÄ„Ç§„Çπ„Éó„Éº„É´„Å´Êàª„Åô„ÄÇ', cost: null },
    17: { name: 'È¢®Ë©ïÊìç‰Ωú', description: '‰ªªÊÑè„ÅÆ„Éó„É¨„Ç§„É§„Éº1‰∫∫„ÅÆÂ®ÅÂé≥-3', cost: { prestige: 2 } },
    18: { name: 'Â∏ÇÂ†¥„ÅÆÂØµÂÖê', description: '„ÅÇ„Å™„Åü„ÅÆÂ®ÅÂé≥+5', cost: null }
  };
  
  return effects[sum] || { name: 'ÁÑ°ÂäπÊûú', description: 'Áâπ„Å´Â§âÂåñ„Å™„Åó', cost: null };
}

function executeTrendEffect(G: GameState, effect: any, playerId: string) {
    
  switch (effect.name) {
    case 'ÁµåÊ∏àÁâπÈúÄ':
      for (const pid in G.players) {
        G.players[pid].money += 15;
      }
      break;
      
    case 'ÊäÄË°ìÈù©Êñ∞':
      // Ëá™Ë∫´„ÅÆ‰ªªÊÑè„ÅÆË®≠Ë®à1„Å§„ÅÆ„ÉÄ„Ç§„ÇπÂÄ§-1ÔºàÁ∞°ÊòìÂÆüË£ÖÔºöÊúÄÂàù„ÅÆË®≠Ë®à„ÅÆ„Ç≥„Çπ„Éà-1Ôºâ
      const techPlayer = G.players[playerId];
      if (techPlayer && techPlayer.designs.length > 0) {
        const design = techPlayer.designs[0]; // ÊúÄÂàù„ÅÆË®≠Ë®à„ÇíÈÅ∏Êäû
        if (design.cost > 1) {
          design.cost -= 1;
                  }
      }
      break;
      
    case '„Ç§„É≥„Éï„É´„Ç®„É≥„Çµ„ÉºÁ¥π‰ªã':
      const player = G.players[playerId];
      if (player) {
        for (const product of player.personalMarket) {
          // ‰∫∫Ê∞óÂ∫¶‰∏äÊòáÊôÇ„ÅÆ‰ΩçÁΩÆÊõ¥Êñ∞Âá¶ÁêÜ
          const oldPopularity = product.popularity;
          product.popularity = Math.min(6, product.popularity + 1);
          
          // „Éë„Éº„ÇΩ„Éä„É´„Éª„Éû„Éº„Ç±„ÉÉ„ÉàÂÜÖ„Åß„ÅÆ‰ΩçÁΩÆË™øÊï¥„ÅåÂøÖË¶Å„Å™Â†¥Âêà
          if (product.popularity !== oldPopularity && product.price > 0) {
            // ÂïÜÂìÅ„ÅÆ‰ΩçÁΩÆ„ÇíÊõ¥Êñ∞Ôºà‰æ°Ê†º„ÅØÂ§â„Çè„Çâ„Åö„ÄÅ‰∫∫Ê∞óÂ∫¶„ÅÆ„ÅøÂ§âÊõ¥Ôºâ
                      }
        }
              }
      break;
      
    case 'Ê±öÊüìÊîπÂñÑ„Ç≠„É£„É≥„Éö„Éº„É≥':
      G.marketPollution = Math.max(0, G.marketPollution - 2);
            break;
      
    case '„ÉÜ„É¨„ÉØ„Éº„ÇØÈúÄË¶Å':
      // ‰æ°Ê†º10‰ª•‰∏ã„ÅÆÂÖ®ÂïÜÂìÅ„ÅÆ‰∫∫Ê∞óÂ∫¶+1
      for (const pid in G.players) {
        for (const product of G.players[pid].personalMarket) {
          if (product.price > 0 && product.price <= 10) {
            const oldPopularity = product.popularity;
            product.popularity = Math.min(6, product.popularity + 1);
            if (product.popularity !== oldPopularity) {
                          }
          }
        }
      }
      for (const product of G.automata.market) {
        if (product.price > 0 && product.price <= 10) {
          product.popularity = Math.min(6, product.popularity + 1);
        }
      }
      console.log('üíª All products with price ‚â§10 gained +1 popularity');
      break;
      
    case '„Ç§„É≥„Éï„É¨ÈÄ≤Ë°å':
      // ÂÖ®„Å¶„ÅÆËª¢Â£≤„Åß„ÅØ„Å™„ÅÑÂïÜÂìÅ„ÅÆ‰æ°Ê†º+2ÔºàÊ∞∏Á∂öÔºâ
      for (const pid in G.players) {
        for (const product of G.players[pid].personalMarket) {
          if (!product.isResale && product.price > 0) {
            product.price += 2;
          }
        }
      }
      for (const product of G.automata.market) {
        if (!product.isResale && product.price > 0) {
          product.price += 2;
        }
      }
      console.log('üí∞ All non-resale products gained +2 price');
      break;
      
    case 'DIY„Éñ„Éº„É†':
      // ÂÖ®„Å¶„ÅÆ„Éó„É¨„Ç§„É§„Éº„ÅÆÊúÄÊñ∞Ë®≠Ë®à„ÅÆ„ÉÄ„Ç§„ÇπÂÄ§-1
      for (const pid in G.players) {
        const diyPlayer = G.players[pid];
        if (diyPlayer.designs.length > 0) {
          const latestDesign = diyPlayer.designs[diyPlayer.designs.length - 1]; // ÊúÄÊñ∞Ë®≠Ë®à
          if (latestDesign.cost > 1) {
            latestDesign.cost -= 1;
                      }
        }
      }
      break;
      
    case '„Ç∑„Éß„Éº„ÉàÂãïÁîª„Éñ„Éº„É†':
      // Ëª¢Â£≤„ÅåÊàêÂäü„Åô„Çã„Åü„Å≥„Å´+2Ë≥áÈáë„Éú„Éº„Éä„ÇπÔºàÁô∫ÂãïÂæåÊ∞∏Á∂öÔºâ
      G.shortVideoBonus = true;
      break;
      
    case '„ÇÆ„Éï„ÉàÈúÄË¶Å':
      // ‰∫∫Ê∞óÂ∫¶3‰ª•‰∏ã„ÅÆÂÖ®ÂïÜÂìÅ„ÅÆ‰∫∫Ê∞óÂ∫¶„Çí+1
      for (const pid in G.players) {
        for (const product of G.players[pid].personalMarket) {
          if (product.price > 0 && product.popularity <= 3) {
            const oldPopularity = product.popularity;
            product.popularity = Math.min(6, product.popularity + 1);
            if (product.popularity !== oldPopularity) {
                          }
          }
        }
      }
      for (const product of G.automata.market) {
        if (product.price > 0 && product.popularity <= 3) {
          product.popularity = Math.min(6, product.popularity + 1);
        }
      }
      break;
      
    case 'Á∑ëÂåñ‰øÉÈÄ≤':
      // Â∏ÇÂ†¥Ê±öÊüì„É¨„Éô„É´„Çí-3
      G.marketPollution = Math.max(0, G.marketPollution - 3);
            break;
      
    case 'Ê∂àË≤ªËÄÖ‰∏ç‰ø°':
      // „ÅÇ„Å™„Åü‰ª•Â§ñ„ÅÆÂÖ®„Éó„É¨„Ç§„É§„Éº„ÅÆÂ®ÅÂé≥-1
      for (const pid in G.players) {
        if (pid !== playerId) {
          const targetPlayer = G.players[pid];
          targetPlayer.prestige = Math.max(-5, targetPlayer.prestige - 1);
                  }
      }
      break;
      
    case 'Â∏ÇÂ†¥ÈñãÊîæ':
      // „ÉÄ„Ç§„Çπ„Çí3„Å§Âºï„Åç„ÄÅ„Ç≥„Çπ„Éà0„ÅßË®≠Ë®à„ÉªË£ΩÈÄ†„ÉªË≤©Â£≤ÔºàÁ∞°ÊòìÂÆüË£ÖÔºâ
      const marketPlayer = G.players[playerId];
      if (marketPlayer) {
        // „ÉÄ„Ç§„Çπ„ÇíÊåØ„Çã
        const dice1 = rollDice();
                
        // ÊúÄÂàù„ÅÆ„ÉÄ„Ç§„Çπ„ÅßÁÑ°ÊñôË®≠Ë®à„ÉªË£ΩÈÄ†„ÉªË≤©Â£≤
        if (marketPlayer.designs.length < 6) {
          const freeDesign = {
            id: `free-design-${playerId}-${Date.now()}`,
            cost: dice1,
            isOpenSource: false
          };
          marketPlayer.designs.push(freeDesign);
          
          // ÁÑ°ÊñôË£ΩÈÄ†
          const freeProduct = {
            id: `free-product-${playerId}-${Date.now()}`,
            cost: dice1,
            price: dice1 * 2, // Ëá™ÂãïË≤©Â£≤‰æ°Ê†ºË®≠ÂÆö
            popularity: 1,
            playerId: playerId,
            isResale: false
          };
          marketPlayer.personalMarket.push(freeProduct);
          
                  }
      }
      break;
      
    case 'È¢®Ë©ïÊìç‰Ωú':
      // ‰ªªÊÑè„ÅÆ„Éó„É¨„Ç§„É§„Éº1‰∫∫„ÅÆÂ®ÅÂé≥-3ÔºàÁ∞°ÊòìÂÆüË£ÖÔºö„É©„É≥„ÉÄ„É†„Å™‰ªñ„Éó„É¨„Ç§„É§„ÉºÔºâ
      const otherPlayerIds = Object.keys(G.players).filter(pid => pid !== playerId);
      if (otherPlayerIds.length > 0) {
        const targetIndex = Math.floor(Math.random() * otherPlayerIds.length);
        const targetId = otherPlayerIds[targetIndex];
        const targetPlayer = G.players[targetId];
        
        targetPlayer.prestige = Math.max(-5, targetPlayer.prestige - 3);
              }
      break;
      
    case '„Çµ„Çπ„ÉÜ„Éä„Éì„É™„ÉÜ„Ç£':
      // „Éó„É¨„Ç§„É§„Éº„Åå‰ªªÊÑè„ÅÆÂïÜÂìÅ„ÅÆ‰∫∫Ê∞óÂ∫¶„Çí+3„Åß„Åç„ÇãÔºàÂÆüË£Ö„ÅØÁ∞°ÊòìÁâàÔºöËá™ÂàÜ„ÅÆÂïÜÂìÅÂÖ®„Å¶„Å´+1Ôºâ
      const sustainabilityPlayer = G.players[playerId];
      if (sustainabilityPlayer) {
        for (const product of sustainabilityPlayer.personalMarket) {
          const oldPopularity = product.popularity;
          product.popularity = Math.min(6, product.popularity + 1);
          if (product.popularity !== oldPopularity) {
                      }
        }
      }
      break;
      
    case 'Â∏ÇÂ†¥„ÅÆÂØµÂÖê':
      // „ÅÇ„Å™„Åü„ÅÆÂ®ÅÂé≥+5
      const favoritePlayer = G.players[playerId];
      if (favoritePlayer) {
        favoritePlayer.prestige += 5;
              }
      break;
      
    default:
            break;
  }
}

function startGame(G: GameState, ctx: Ctx) {
  
  // Êó¢„Å´ÂèÇÂä†„Åó„Å¶„ÅÑ„Çã„Éó„É¨„Ç§„É§„Éº„ÇíÂàùÊúüÁä∂ÊÖã„Å´Ë®≠ÂÆö
  for (const playerId in G.players) {
    const player = G.players[playerId];
    // Âü∫Êú¨„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÂàùÊúüÂåñ
    player.money = 30;
    player.prestige = 5;
    player.resaleHistory = 0;
    player.actionPoints = 3;
    player.designs = [];
    player.personalMarket = [];
    
    // ÂàùÊúüË®≠Ë®à„Çí2„Å§ÁîüÊàê
    const designDice = rollMultipleDice(2);
    player.designs = designDice.map((cost, index) => ({
      id: `design-${playerId}-${index}`,
      cost,
      isOpenSource: false
    }));
  }
  
  // „Ç≤„Éº„É†Áä∂ÊÖã„ÇíÊõ¥Êñ∞
  G.phase = 'action';
  G.gameStarted = true;
  G.currentPlayer = '0';
  
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: 'lobby',
      actor: 'system',
      action: '„Ç≤„Éº„É†ÈñãÂßã',
      details: `${ctx.numPlayers}‰∫∫„Åß„Ç≤„Éº„É†„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü`,
      timestamp: Date.now()
    });
  }
  
  }

function joinGame(G: GameState, _ctx: Ctx, playerName: string) {
    
  // „É≠„Éì„ÉºÁä∂ÊÖã„Åß„ÅÆ„ÅøÂèÇÂä†ÂèØËÉΩ
  if (G.phase !== 'lobby') {
    return 'INVALID_MOVE';
  }
  
  // „Éó„É¨„Ç§„É§„ÉºÊï∞„ÅÆ‰∏äÈôê„ÉÅ„Çß„ÉÉ„ÇØÔºà4‰∫∫„Åæ„ÅßÔºâ
  const currentPlayerCount = Object.keys(G.players).length;
  if (currentPlayerCount >= 4) {
    console.error('Cannot join game: maximum players reached');
    return 'INVALID_MOVE';
  }
  
  // Êñ∞„Åó„ÅÑ„Éó„É¨„Ç§„É§„ÉºID„ÇíÁîüÊàêÔºà0„Åã„ÇâÈ†ÜÁï™Ôºâ
  const newPlayerId = String(currentPlayerCount);
  
  // „Éó„É¨„Ç§„É§„Éº„ÅåÊó¢„Å´Â≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
  if (G.players[newPlayerId]) {
    console.error(`Player ${newPlayerId} already exists`);
    return 'INVALID_MOVE';
  }
  
  // Êñ∞„Åó„ÅÑ„Éó„É¨„Ç§„É§„Éº„Çí‰ΩúÊàêÔºà„Ç≤„Éº„É†ÈñãÂßãÊôÇ„Å´ÂàùÊúüÂåñ„Åï„Çå„Çã„ÅÆ„ÅßÂü∫Êú¨ÊÉÖÂ†±„ÅÆ„ÅøÔºâ
  G.players[newPlayerId] = {
    id: newPlayerId,
    name: playerName || `Player ${parseInt(newPlayerId) + 1}`,
    money: 0, // „Ç≤„Éº„É†ÈñãÂßãÊôÇ„Å´30„Å´Ë®≠ÂÆö„Åï„Çå„Çã
    prestige: 0, // „Ç≤„Éº„É†ÈñãÂßãÊôÇ„Å´5„Å´Ë®≠ÂÆö„Åï„Çå„Çã
    resaleHistory: 0,
    actionPoints: 0, // „Ç≤„Éº„É†ÈñãÂßãÊôÇ„Å´3„Å´Ë®≠ÂÆö„Åï„Çå„Çã
    designs: [],
    personalMarket: []
  };
  
    
  // „É≠„Ç∞Ë®òÈå≤
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: G.phase,
      actor: newPlayerId,
      action: '„Ç≤„Éº„É†ÂèÇÂä†',
      details: `${G.players[newPlayerId].name}„Åå„Ç≤„Éº„É†„Å´ÂèÇÂä†„Åó„Åæ„Åó„Åü`,
      timestamp: Date.now()
    });
  }
}

function addPlayLog(G: GameState, playerId: string, action: string, details: string) {
  if (G.playLog) {
    G.playLog.push({
      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      round: G.round,
      phase: G.phase,
      actor: playerId,
      action: action,
      details: details,
      timestamp: Date.now()
    });
  }
}

export default MarketDisruption;